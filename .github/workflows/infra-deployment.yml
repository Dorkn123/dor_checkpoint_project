name: Infrastructure Deployment

on:
  push:
    branches:
      - main

env:
  AWS_DEFAULT_REGION: eu-north-1
  ENVIRONMENT: dev
  TF_VERSION: 1.9.5
  TG_VERSION: 0.66.9

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Setup AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Step 3: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Step 4: Check if S3 Bucket Exists
      - name: Check if S3 Bucket Exists
        id: check_s3
        run: |
          BUCKET_NAME="dor-checkpoint-assets-${{ env.ENVIRONMENT }}"
          if aws s3 ls "s3://${BUCKET_NAME}" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "S3 bucket does not exist"
            echo "S3_EXISTS=false" >> $GITHUB_ENV
          else
            echo "S3 bucket exists"
            echo "S3_EXISTS=true" >> $GITHUB_ENV
          fi
        env:
          BUCKET_NAME: dor-checkpoint-assets-${{ env.ENVIRONMENT }}

      # Step 5: Deploy S3 Resources if S3 Does Not Exist
      - name: Deploy S3 Resources
        if: env.S3_EXISTS == 'false'
        uses: gruntwork-io/terragrunt-action@v2.1.4
        with:
          tg_version: ${{ env.TG_VERSION }}
          tg_dir: terraform/environments/${{ env.ENVIRONMENT }}/s3
          tg_command: apply --auto-approve
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 6: Update config.json with S3 Bucket Values
      - name: Update config.json with S3 Bucket Values
        run: |
          jq --arg BUCKET_NAME "$BUCKET_NAME" '.bucket_name=$BUCKET_NAME' python/src/config.json > tmp.$$.json && mv tmp.$$.json python/src/config.json
        env:
          BUCKET_NAME: dor-checkpoint-assets-${{ env.ENVIRONMENT }}

      # Step 7: Backup Terragrunt File
      - name: Backup Terragrunt File
        run: cp terraform/environments/${{ env.ENVIRONMENT }}/cloudfront/terragrunt.hcl terraform/environments/${{ env.ENVIRONMENT }}/cloudfront/terragrunt.hcl.bak

      # Step 8: Check if CloudFront Distribution Exists
      - name: Check if CloudFront Distribution Exists
        id: check_cloudfront
        run: |
          CLOUDFRONT_COMMENT="CloudFront-${{ env.ENVIRONMENT }}"
          CF_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Comment=='$CLOUDFRONT_COMMENT'].Id | [0]" --output text)
          if [ -z "$CF_ID" ]; then
            echo "CloudFront distribution does not exist"
            echo "CF_EXISTS=false" >> $GITHUB_ENV
          else
            echo "CloudFront distribution exists"
            echo "CF_EXISTS=true" >> $GITHUB_ENV
            echo "CF_ID=$CF_ID" >> $GITHUB_ENV
          fi
        env:
          CLOUDFRONT_COMMENT: "CloudFront-${{ env.ENVIRONMENT }}"

      # Step 9: Deploy CloudFront Resources if CloudFront Does Not Exist
      - name: Deploy CloudFront Resources
        if: env.CF_EXISTS == 'false'
        uses: gruntwork-io/terragrunt-action@v2.1.4
        with:
          tg_version: ${{ env.TG_VERSION }}
          tg_dir: terraform/environments/${{ env.ENVIRONMENT }}/cloudfront
          tg_command: apply --auto-approve
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 10: Update config.json with CloudFront Values
      - name: Update config.json with CloudFront Values
        run: |
          CF_DOMAIN=$(aws cloudfront get-distribution --id $CF_ID --query "Distribution.DomainName" --output text)
          jq --arg CF_DOMAIN "$CF_DOMAIN" '.cloudfront_domain=$CF_DOMAIN' python/src/config.json > tmp.$$.json && mv tmp.$$.json python/src/config.json
        env:
          CF_ID: ${{ steps.check_cloudfront.outputs.CF_ID }}

      # Step 11: Cleanup Backup File
      - name: Cleanup Backup File
        if: success()
        run: rm terraform/environments/${{ env.ENVIRONMENT }}/cloudfront/terragrunt.hcl.bak

      # Step 12: Restore Terragrunt File on Failure
      - name: Restore Terragrunt File on Failure
        if: failure()
        run: mv terraform/environments/${{ env.ENVIRONMENT }}/cloudfront/terragrunt.hcl.bak terraform/environments/${{ env.ENVIRONMENT }}/cloudfront/terragrunt.hcl
