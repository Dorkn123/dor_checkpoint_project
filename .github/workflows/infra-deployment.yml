name: Infrastructure Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/infra-deployment.yml'

env:
  ENVIRONMENT: 'dev' # Set this to the correct environment
  tf_version: '1.9.5'
  tg_version: '0.66.9'
  TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform.d/plugin-cache
  AWS_REGION: "eu-north-1"

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-north-1  

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Terraform Plugin Cache Dir
      run: mkdir --parents $TF_PLUGIN_CACHE_DIR

    - name: Backup CloudFront terragrunt.hcl
      run: cp terraform/environments/${{ env.ENVIRONMENT }}/cloudfront/terragrunt.hcl terraform/environments/${{ env.ENVIRONMENT }}/cloudfront/terragrunt.hcl.bak

    - name: Setup and Deploy S3 in dev with Terragrunt
      uses: gruntwork-io/terragrunt-action@v1
      with:
        tf_version: ${{ env.tf_version }}
        tg_version: ${{ env.tg_version }}
        tg_command: 'apply'
        tg_dir: 'terraform/environments/${{ env.ENVIRONMENT }}/s3'

    - name: Get Terraform Output for bucket_name
      id: get_bucket_name
      uses: gruntwork-io/terragrunt-action@v1
      with:
        tf_version: ${{ env.tf_version }}
        tg_version: ${{ env.tg_version }}
        tg_command: 'output -raw bucket_name'
        tg_dir: 'terraform/environments/${{ env.ENVIRONMENT }}/s3'

    - name: Check for Existing CloudFront Distribution
      id: check_cloudfront
      run: |
        EXISTING_DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[0].DomainName=='${{ steps.get_bucket_name.outputs.value }}.s3.amazonaws.com'].Id" --output text)
        echo "distribution_id=$EXISTING_DISTRIBUTION_ID" >> $GITHUB_ENV
        if [ -z "$EXISTING_DISTRIBUTION_ID" ]; then
          echo "No existing CloudFront distribution found."
          echo "cloudfront_exists=false" >> $GITHUB_ENV
        else
          echo "Existing CloudFront distribution found: $EXISTING_DISTRIBUTION_ID"
          echo "cloudfront_exists=true" >> $GITHUB_ENV
        fi

    - name: Deploy CloudFront if not exists
      if: env.cloudfront_exists == 'false'
      uses: gruntwork-io/terragrunt-action@v1
      with:
        tf_version: ${{ env.tf_version }}
        tg_version: ${{ env.tg_version }}
        tg_command: 'apply'
        tg_dir: 'terraform/environments/${{ env.ENVIRONMENT }}/cloudfront'

    - name: Get CloudFront Domain Name
      if: env.cloudfront_exists == 'false'
      id: get_cloudfront_domain_name
      uses: gruntwork-io/terragrunt-action@v1
      with:
        tf_version: ${{ env.tf_version }}
        tg_version: ${{ env.tg_version }}
        tg_command: 'output -raw cloudfront_domain_name'
        tg_dir: 'terraform/environments/${{ env.ENVIRONMENT }}/cloudfront'

    - name: Get Existing CloudFront Domain Name
      if: env.cloudfront_exists == 'true'
      run: |
        CLOUDFRONT_DOMAIN=$(aws cloudfront get-distribution --id ${{ env.distribution_id }} --query "Distribution.DomainName" --output text)
        echo "cloudfront_domain=$CLOUDFRONT_DOMAIN" >> $GITHUB_ENV

    - name: Update config.json with CloudFront domain_name
      run: | 
          sed -i "s|\"cloudfront_domain\": \"\"|\"cloudfront_domain\": \"${{ env.cloudfront_domain }}\"|g" python/src/config.json
          sed -i "s|\"cloudfront_url\": \"\"|\"cloudfront_url\": \"https://${{ env.cloudfront_domain }}/filtered_products.json\"|g" python/src/config.json

    - name: Restore CloudFront terragrunt.hcl
      run: cp terraform/environments/${{ env.ENVIRONMENT }}/cloudfront/terragrunt.hcl.bak terraform/environments/${{ env.ENVIRONMENT }}/cloudfront/terragrunt.hcl

    - name: Invalidate CloudFront Cache
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ env.distribution_id }} --paths "/*"
