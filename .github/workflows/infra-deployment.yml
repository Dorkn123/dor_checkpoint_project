name: Infrastructure Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/infra-deployment.yml'

env:
  tf_version: '1.9.5'
  tg_version: '0.66.9'
  AWS_REGION: "eu-north-1"

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-north-1  

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up environment variables
      run: |
        ENVIRONMENT="dev"
        BUCKET_NAME="dor-checkpoint-assets-$ENVIRONMENT"
        TERRAGRUNT_FILE="terraform/environments/$ENVIRONMENT/cloudfront/terragrunt.hcl"
        BACKUP_FILE="$TERRAGRUNT_FILE.bak"

    - name: Backup CloudFront terragrunt.hcl
      run: cp ${{ env.TERRAGRUNT_FILE }} ${{ env.BACKUP_FILE }}

    - name: Check if S3 bucket exists
      id: check_s3
      run: |
        set +e
        aws s3api head-bucket --bucket ${{ env.BUCKET_NAME }} > /dev/null 2>&1
        if [ $? -eq 0 ]; then
          echo "S3_BUCKET_EXISTS=true" >> $GITHUB_ENV
          echo "BUCKET_ARN=$(echo arn:aws:s3:::${{ env.BUCKET_NAME }})" >> $GITHUB_ENV
        else
          echo "S3_BUCKET_EXISTS=false" >> $GITHUB_ENV
        fi
        set -e

    - name: Apply S3 module if bucket doesn't exist
      if: env.S3_BUCKET_EXISTS == 'false'
      uses: gruntwork-io/terragrunt-action@v1
      with:
        tf_version: ${{ env.tf_version }}
        tg_version: ${{ env.tg_version }}
        tg_command: 'apply'
        tg_dir: 'terraform/environments/dev/s3'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        echo "BUCKET_ARN=$(terragrunt output -raw bucket_arn)" >> $GITHUB_ENV

    - name: Update CloudFront terragrunt.hcl with S3 bucket details
      run: |
        sed -i "s/dependency.s3.outputs.bucket_name/${{ env.BUCKET_NAME }}/g" ${{ env.TERRAGRUNT_FILE }}
        sed -i "s/dependency.s3.outputs.bucket_arn/${{ env.BUCKET_ARN }}/g" ${{ env.TERRAGRUNT_FILE }}

    - name: Check CloudFront distribution
      id: check_cloudfront
      run: |
        DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[0].DomainName=='${{ env.BUCKET_NAME }}.s3.amazonaws.com'].Id" --output text)
        echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV
        if [ -z "$DISTRIBUTION_ID" ]; then
          echo "CLOUDFRONT_EXISTS=false" >> $GITHUB_ENV
        else
          echo "CLOUDFRONT_EXISTS=true" >> $GITHUB_ENV
          echo "CLOUDFRONT_DOMAIN=$(aws cloudfront get-distribution --id $DISTRIBUTION_ID --query 'Distribution.DomainName' --output text)" >> $GITHUB_ENV
        fi

    - name: Apply CloudFront module if distribution doesn't exist
      if: env.CLOUDFRONT_EXISTS == 'false'
      uses: gruntwork-io/terragrunt-action@v1
      with:
        tf_version: ${{ env.tf_version }}
        tg_version: ${{ env.tg_version }}
        tg_command: 'apply'
        tg_dir: 'terraform/environments/dev/cloudfront'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        echo "CLOUDFRONT_DOMAIN=$(terragrunt output -raw cloudfront_domain_name)" >> $GITHUB_ENV

    - name: Invalidate CloudFront cache if distribution exists
      if: env.CLOUDFRONT_EXISTS == 'true'
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ env.DISTRIBUTION_ID }} --paths "/*"

    - name: Update config.json with CloudFront details
      run: |
        jq ".bucket_name=\"${{ env.BUCKET_NAME }}\" | .cloudfront_domain=\"${{ env.CLOUDFRONT_DOMAIN }}\" | .cloudfront_url=\"https://${{ env.CLOUDFRONT_DOMAIN }}/filtered_products.json\"" python/src/config.json > tmp.$$.json && mv tmp.$$.json python/src/config.json

    - name: Clean up backup file
      run: rm ${{ env.BACKUP_FILE }}

