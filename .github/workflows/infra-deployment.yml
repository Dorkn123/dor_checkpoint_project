name: Infrastructure Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/infra-deployment.yml'

env:
  tf_version: '1.9.5'
  tg_version: '0.66.9'
  TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform.d/plugin-cache
  AWS_REGION: "eu-north-1"

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-north-1  

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Terraform and Terragrunt
      run: |
        echo "Setting up Terraform and Terragrunt"
        mkdir -p $TF_PLUGIN_CACHE_DIR
        echo "Terraform version: ${{ env.tf_version }}"
        echo "Terragrunt version: ${{ env.tg_version }}"

    - name: Deploy S3 in dev with Terragrunt
      run: |
        terragrunt apply --terragrunt-working-dir terraform/environments/dev/s3
      env:
        TF_VERSION: ${{ env.tf_version }}
        TG_VERSION: ${{ env.tg_version }}

    - name: Get Terraform Output for bucket_name
      id: get_bucket_name
      run: |
        echo "Getting bucket name from Terraform output"
        BUCKET_NAME=$(terragrunt output -raw bucket_name --terragrunt-working-dir terraform/environments/dev/s3)
        echo "bucket_name=$BUCKET_NAME" >> $GITHUB_ENV

    - name: Check for Existing CloudFront Distribution
      id: check_cloudfront
      run: |
        echo "Checking for existing CloudFront distribution"
        EXISTING_DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[0].DomainName=='${{ env.bucket_name }}.s3.amazonaws.com'].Id" --output text)
        echo "distribution_id=$EXISTING_DISTRIBUTION_ID" >> $GITHUB_ENV
        if [ -z "$EXISTING_DISTRIBUTION_ID" ]; then
          echo "No existing CloudFront distribution found."
          echo "cloudfront_exists=false" >> $GITHUB_ENV
        else
          echo "Existing CloudFront distribution found: $EXISTING_DISTRIBUTION_ID"
          echo "cloudfront_exists=true" >> $GITHUB_ENV
        fi

    - name: Deploy CloudFront if not exists
      if: env.cloudfront_exists == 'false'
      run: |
        echo "Deploying CloudFront distribution"
        terragrunt apply --terragrunt-working-dir terraform/environments/dev/cloudfront
      env:
        TF_VERSION: ${{ env.tf_version }}
        TG_VERSION: ${{ env.tg_version }}

    - name: Get CloudFront Domain Name
      if: env.cloudfront_exists == 'false'
      id: get_cloudfront_domain_name
      run: |
        echo "Getting CloudFront domain name from Terraform output"
        CLOUDFRONT_DOMAIN=$(terragrunt output -raw cloudfront_domain_name --terragrunt-working-dir terraform/environments/dev/cloudfront)
        echo "cloudfront_domain=$CLOUDFRONT_DOMAIN" >> $GITHUB_ENV

    - name: Get Existing CloudFront Domain Name
      if: env.cloudfront_exists == 'true'
      run: |
        echo "Getting existing CloudFront domain name"
        CLOUDFRONT_DOMAIN=$(aws cloudfront get-distribution --id ${{ env.distribution_id }} --query "Distribution.DomainName" --output text)
        echo "cloudfront_domain=$CLOUDFRONT_DOMAIN" >> $GITHUB_ENV

    - name: Update config.json with CloudFront domain_name
      run: | 
        echo "Updating config.json with CloudFront domain name"
        sed -i "s|\"cloudfront_domain\": \"\"|\"cloudfront_domain\": \"${{ env.cloudfront_domain }}\"|g" python/src/config.json
        sed -i "s|\"cloudfront_url\": \"\"|\"cloudfront_url\": \"https://${{ env.cloudfront_domain }}/filtered_products.json\"|g" python/src/config.json

    - name: Invalidate CloudFront Cache
      run: |
        echo "Invalidating CloudFront cache"
        aws cloudfront create-invalidation --distribution-id ${{ env.distribution_id }} --paths "/*"
