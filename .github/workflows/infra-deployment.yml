name: Deploy Infrastructure

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_DEFAULT_REGION: eu-north-1
  ENVIRONMENT: dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.5

      - name: Set up Terragrunt
        uses: gruntwork-io/terragrunt-action@v1
        with:
          tg_version: 0.66.9  # Corrected from terragrunt_version to tg_version

      - name: Define variables
        id: define_vars
        run: |
          echo "BUCKET_NAME=dor-checkpoint-assets-${{ env.ENVIRONMENT }}" >> $GITHUB_ENV
          echo "SCRIPT_DIR=$(pwd)" >> $GITHUB_ENV
          echo "CONFIG_FILE=$(pwd)/python/src/config.json" >> $GITHUB_ENV
          echo "TERRAGRUNT_FILE=$(pwd)/terraform/environments/${{ env.ENVIRONMENT }}/cloudfront/terragrunt.hcl" >> $GITHUB_ENV
          echo "BACKUP_FILE=$(pwd)/terraform/environments/${{ env.ENVIRONMENT }}/cloudfront/terragrunt.hcl.bak" >> $GITHUB_ENV

      - name: Check if S3 bucket exists
        id: check_s3
        run: |
          if aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
            echo "Bucket exists."
            echo "BUCKET_ARN=$(aws s3api get-bucket-location --bucket $BUCKET_NAME --output text)" >> $GITHUB_ENV
          else
            echo "Bucket does not exist. Creating a new bucket."
            cd terraform/environments/${{ env.ENVIRONMENT }}/s3
            terragrunt apply -auto-approve
            echo "BUCKET_ARN=$(terragrunt output -raw bucket_arn)" >> $GITHUB_ENV
          fi

      - name: Backup CloudFront terragrunt.hcl
        run: |
          if [ -f "$TERRAGRUNT_FILE" ]; then
            cp "$TERRAGRUNT_FILE" "$BACKUP_FILE"
          else
            echo "Error: $TERRAGRUNT_FILE does not exist."
            exit 1
          fi

      - name: Update CloudFront terragrunt.hcl
        run: |
          sed -i "s/dependency.s3.outputs.bucket_name/\"$BUCKET_NAME\"/g" $TERRAGRUNT_FILE
          sed -i "s/dependency.s3.outputs.bucket_arn/\"$BUCKET_ARN\"/g" $TERRAGRUNT_FILE

      - name: Check if CloudFront distribution exists
        id: check_cloudfront
        run: |
          DISTRIBUTION_DATA=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[0].DomainName=='${BUCKET_NAME}.s3.amazonaws.com'].{Id:Id, LastModifiedTime:LastModifiedTime}" --output json)
          if [ -z "$DISTRIBUTION_DATA" ] || [ "$DISTRIBUTION_DATA" == "[]" ]; then
            echo "No existing CloudFront distribution found. Creating a new distribution."
            cd terraform/environments/${{ env.ENVIRONMENT }}/cloudfront
            terragrunt apply -auto-approve
            echo "CLOUDFRONT_DOMAIN=$(terragrunt output -raw cloudfront_domain_name)" >> $GITHUB_ENV
          else
            SELECTED_DISTRIBUTION_ID=$(echo "$DISTRIBUTION_DATA" | jq -r 'max_by(.LastModifiedTime) | .Id')
            CLOUDFRONT_DOMAIN=$(aws cloudfront get-distribution --id "$SELECTED_DISTRIBUTION_ID" --query "Distribution.DomainName" --output text)
            aws cloudfront create-invalidation --distribution-id "$SELECTED_DISTRIBUTION_ID" --paths "/*"
            echo "CLOUDFRONT_DOMAIN=$CLOUDFRONT_DOMAIN" >> $GITHUB_ENV
          fi

      - name: Update config.json
        run: |
          jq ".bucket_name=\"$BUCKET_NAME\" | .cloudfront_domain=\"$CLOUDFRONT_DOMAIN\" | .cloudfront_url=\"https://$CLOUDFRONT_DOMAIN/filtered_products.json\"" $CONFIG_FILE > tmp.$$.json && mv tmp.$$.json $CONFIG_FILE

      - name: Cleanup or rollback
        if: failure()
        run: |
          if [ -f "$BACKUP_FILE" ]; then
            cp "$BACKUP_FILE" "$TERRAGRUNT_FILE"
          fi

      - name: Cleanup backup
        if: success()
        run: |
          rm -f "$BACKUP_FILE"
